# Java Maven CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  build:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/repo
    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: mvn dependency:go-offline

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}

      - run: mvn verify

  release:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/repo
    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m

    steps:
      - checkout
      - run:
          name: Cut new release
          command: |
            # assemble current and new version numbers
            OLD_VERSION=$(mvn -q \
              -Dexec.executable="echo" -Dexec.args='${project.version}' \
              --non-recursive org.codehaus.mojo:exec-maven-plugin:1.3.1:exec)
            NEW_VERSION="${OLD_VERSION/-SNAPSHOT/}"
            echo "Releasing $OLD_VERSION as $NEW_VERSION"

            # ensure dependencies use release versions
            mvn versions:use-releases

            # write release version to POM
            mvn versions:set -DnewVersion=${NEW_VERSION}

            # setup git
            git config user.name "aurelian-one-bot [Via CircleCI]"
            git config user.email "aurelian-one-bot@ben.meierhost.com"

            # commit and tag
            git add pom.xml
            git commit -m "Release: $NEW_VERSION"
            git tag "$NEW_VERSION"

            # land on master and publish
            git checkout master
            git merge --no-edit ${CIRCLE_BRANCH}

            echo ${ENCODED_PRIVATE_KEY} | base64 -d > ~/.ssh/secure-key
            chmod 0600 ~/.ssh/secure-key
            ls -alh ~/.ssh/secure-key
            export GIT_SSH_COMMAND="ssh -i ${HOME}/.ssh/secure-key -o IdentitiesOnly=yes"

            git push origin master --tags

            # increment minor version number
            MAJ_VERSION=$(echo "$NEW_VERSION" | cut -d '.' -f 1)
            MIN_VERSION=$(echo "$NEW_VERSION" | cut -d '.' -f 2)
            PATCH_VERSION=$(echo "$NEW_VERSION" | cut -d '.' -f 3)
            NEW_PATCH=$(($PATCH_VERSION + 1))
            DEV_VERSION="$MAJ_VERSION.$MIN_VERSION.$NEW_PATCH-SNAPSHOT"

            # ready development branch
            git checkout develop
            git merge --no-edit ${CIRCLE_BRANCH}
            mvn versions:set -DnewVersion=${DEV_VERSION}
            git add pom.xml
            git commit -m "Changed: bumped pom version to $DEV_VERSION"
            git push origin develop

  deploy:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/repo
    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m

    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run: mvn -s .circleci/settings.xml deploy

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - release:
          requires:
            - build
          context: aurelian-one-bot
          filters:
            branches:
              only: /^release.*$/
      - deploy:
          requires:
            - build
          context: aurelian-one-bot
          filters:
            branches:
              only: /^master$/